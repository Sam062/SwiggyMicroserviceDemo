package base.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import base.entity.User;
import base.model.LoginRequest;
import base.model.LoginResponse;
import base.service.UserService;
import base.utils.JwtUtils;

@RestController
@RequestMapping("/auth")
@CrossOrigin("*")
public class AuthController {

	@Autowired
	private UserService userService;

	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private JwtUtils jwtUtils;
	
	@GetMapping("{pwd}")
	public String test(@PathVariable("pwd") String pwd) {
		return passwordEncoder.encode(pwd);
	}
	

	@PostMapping("/registerUser")
	public ResponseEntity<User> registerUser(@RequestBody User userInput) {
		userInput.setPassword(passwordEncoder.encode(userInput.getPassword()));
		User user = userService.saveUser(userInput);

		if (user != null) {
			return new ResponseEntity<>(user, HttpStatus.CREATED);
		} else
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody LoginRequest req) {
		Authentication authentication = null;
		try {
			authentication = authenticationManager
					.authenticate(new UsernamePasswordAuthenticationToken(req.getUsername(), req.getPassword()));
		} catch (Exception e) {
//			e.printStackTrace();
			return new ResponseEntity<>(e.getMessage(), HttpStatus.UNAUTHORIZED);
		}

		SecurityContextHolder.getContext().setAuthentication(authentication);

		String token = jwtUtils.generateToken(authentication);
		UserDetails user = userService.loadUserByUsername(req.getUsername());
		if (user == null)
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);

		return new ResponseEntity<>(new LoginResponse("Bearer " + token, "Bearer"), HttpStatus.OK);

	}

}
